#メソッドを定義するには、実行する処理内容をdef ～ end 内に記述します。
#def メソッド名(引数)  # 引数は任意
  # 実行する処理内容
#end       メソッドを呼び出すには、そのメソッド名を記述する。


# def greeting
#  'Hello'
# end

# puts greeting


#プログラムは、上から下に順番に処理されます。
#このため、自分で定義したメソッドを使うには、定義の後に呼び出す必要があります。
#また、メソッドは呼び出されない限り、処理が実行されないという点も覚えておきましょう。




def greeting(name)
   "Hello, #{name}!"  # この行のnameは、引数で渡すname 
   "Good morning, #{name}!"    #: この行が戻り値！！

end

puts greeting('John')  # 'John'を引数として渡す

#ここでgreeting.rb内で使った、ダブルクォーテーション（"Hello, #{name}!"）とシングルクォーテーション（'John'）の違いを説明しておきます。
#どちらも文字列を囲む際に使用できますが、ダブルクォーテーションは文字列の中で式展開を行いたい場合や、改行文字（\n）等のエスケープシーケンスを使用したい場合に有用です。
#反対に、これらのことはシングルクォーテーションでは行えません。
#文字列を使う際はどちらを使うべきかを考えながら宣言するとよいでしょう。

# returnを実行すると、そこでメソッドを終了するため、今回のような数値が0である場合には、早々にメソッドを終了したい場合などに有効です。
#このようにreturnなどの制御文を工夫して使用することで、無駄なプログラムの処理をあえて行わないように実装することが可能になります。
#一つ一つの処理をコンパクトに収めるために、あえてreturnを細かく記述することもあります。


def greeting(name)
  return "Hello, #{name}!"
  "Good morning, #{name}!"
end

puts greeting('John')



def calc(num)
  return "計算できません" if num.zero?

  # 複雑な計算処理
end

#numは引数で受け取る値なので、引数に渡る数値が0の場合はreturnによって"計算できません"が返ります。
#そして、それ以降の複雑な計算処理は行われません。ここが重要なところです。

#returnを実行すると、そこでメソッドを終了するため、今回のような数値が0である場合には、早々にメソッドを終了したい場合などに有効です。
#このようにreturnなどの制御文を工夫して使用することで、無駄なプログラムの処理をあえて行わないように実装することが可能になります。
#一つ一つの処理をコンパクトに収めるために、あえてreturnを細かく記述することもあります。